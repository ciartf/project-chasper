package dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import dao.MessageDestination;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_DESTINATION".
*/
public class MessageDestinationDao extends AbstractDao<MessageDestination, String> {

    public static final String TABLENAME = "MESSAGE_DESTINATION";

    /**
     * Properties of entity MessageDestination.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Uuid_destination = new Property(0, String.class, "uuid_destination", true, "UUID_DESTINATION");
        public final static Property Destination = new Property(1, String.class, "destination", false, "DESTINATION");
        public final static Property Buddy_id = new Property(2, String.class, "buddy_id", false, "BUDDY_ID");
    };


    public MessageDestinationDao(DaoConfig config) {
        super(config);
    }
    
    public MessageDestinationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_DESTINATION\" (" + //
                "\"UUID_DESTINATION\" TEXT PRIMARY KEY NOT NULL ," + // 0: uuid_destination
                "\"DESTINATION\" TEXT," + // 1: destination
                "\"BUDDY_ID\" TEXT);"); // 2: buddy_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_DESTINATION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MessageDestination entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUuid_destination());
 
        String destination = entity.getDestination();
        if (destination != null) {
            stmt.bindString(2, destination);
        }
 
        String buddy_id = entity.getBuddy_id();
        if (buddy_id != null) {
            stmt.bindString(3, buddy_id);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MessageDestination readEntity(Cursor cursor, int offset) {
        MessageDestination entity = new MessageDestination( //
            cursor.getString(offset + 0), // uuid_destination
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // destination
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // buddy_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MessageDestination entity, int offset) {
        entity.setUuid_destination(cursor.getString(offset + 0));
        entity.setDestination(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBuddy_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(MessageDestination entity, long rowId) {
        return entity.getUuid_destination();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(MessageDestination entity) {
        if(entity != null) {
            return entity.getUuid_destination();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
