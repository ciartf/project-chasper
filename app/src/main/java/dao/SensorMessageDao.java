package dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import dao.SensorMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SENSOR_MESSAGE".
*/
public class SensorMessageDao extends AbstractDao<SensorMessage, String> {

    public static final String TABLENAME = "SENSOR_MESSAGE";

    /**
     * Properties of entity SensorMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Uuid_sensor_message = new Property(0, String.class, "uuid_sensor_message", true, "UUID_SENSOR_MESSAGE");
        public final static Property Message = new Property(1, String.class, "message", false, "MESSAGE");
        public final static Property Sensor_type = new Property(2, String.class, "sensor_type", false, "SENSOR_TYPE");
        public final static Property Source = new Property(3, String.class, "source", false, "SOURCE");
        public final static Property Is_sent = new Property(4, String.class, "is_sent", false, "IS_SENT");
    };


    public SensorMessageDao(DaoConfig config) {
        super(config);
    }
    
    public SensorMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SENSOR_MESSAGE\" (" + //
                "\"UUID_SENSOR_MESSAGE\" TEXT PRIMARY KEY NOT NULL ," + // 0: uuid_sensor_message
                "\"MESSAGE\" TEXT," + // 1: message
                "\"SENSOR_TYPE\" TEXT," + // 2: sensor_type
                "\"SOURCE\" TEXT," + // 3: source
                "\"IS_SENT\" TEXT);"); // 4: is_sent
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SENSOR_MESSAGE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SensorMessage entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUuid_sensor_message());
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(2, message);
        }
 
        String sensor_type = entity.getSensor_type();
        if (sensor_type != null) {
            stmt.bindString(3, sensor_type);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(4, source);
        }
 
        String is_sent = entity.getIs_sent();
        if (is_sent != null) {
            stmt.bindString(5, is_sent);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SensorMessage readEntity(Cursor cursor, int offset) {
        SensorMessage entity = new SensorMessage( //
            cursor.getString(offset + 0), // uuid_sensor_message
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // message
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sensor_type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // source
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // is_sent
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SensorMessage entity, int offset) {
        entity.setUuid_sensor_message(cursor.getString(offset + 0));
        entity.setMessage(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSensor_type(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSource(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIs_sent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(SensorMessage entity, long rowId) {
        return entity.getUuid_sensor_message();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(SensorMessage entity) {
        if(entity != null) {
            return entity.getUuid_sensor_message();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
